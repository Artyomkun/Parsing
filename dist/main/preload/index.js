import { contextBridge, ipcRenderer } from 'electron';
contextBridge.exposeInMainWorld('electronAPI', {
    showMessage: (message) => ipcRenderer.send('show-message', message),
    platform: process.platform,
    // Добавьте другие методы по мере необходимости
    openFile: () => ipcRenderer.invoke('dialog:openFile'),
    openDirectory: () => ipcRenderer.invoke('dialog:openDirectory'),
    saveFile: (data) => ipcRenderer.invoke('dialog:saveFile', data),
    readFile: (filePath) => ipcRenderer.invoke('dialog:readFile', filePath),
    writeFile: (filePath, data) => ipcRenderer.invoke('dialog:writeFile', filePath, data),
    parseHTML: (url, selector) => ipcRenderer.invoke('parseHTML', url, selector),
    parseDynamicHTML: (url, selector) => ipcRenderer.invoke('parseDynamicHTML', url, selector),
    parseAPI: (url, options) => ipcRenderer.invoke('parseAPI', url, options),
    parseJSON: (url) => ipcRenderer.invoke('parseJSON', url),
    parseXML: (url) => ipcRenderer.invoke('parseXML', url),
    parseCSV: (url) => ipcRenderer.invoke('parseCSV', url),
    parseExcel: (url) => ipcRenderer.invoke('parseExcel', url),
    parseMarkdown: (url) => ipcRenderer.invoke('parseMarkdown', url),
    parseText: (url) => ipcRenderer.invoke('parseText', url),
    parsePDF: (url) => ipcRenderer.invoke('parsePDF', url),
    parseImage: (url) => ipcRenderer.invoke('parseImage', url),
    parseAudio: (url) => ipcRenderer.invoke('parseAudio', url),
    parseVideo: (url) => ipcRenderer.invoke('parseVideo', url),
    parseArchive: (url) => ipcRenderer.invoke('parseArchive', url),
    parseHTMLContent: (url, selector) => ipcRenderer.invoke('parseHTMLContent', url, selector),
    parseDynamicHTMLContent: (url, selector) => ipcRenderer.invoke('parseDynamicHTMLContent', url, selector),
    parseAPIContent: (url, options) => ipcRenderer.invoke('parseAPIContent', url, options),
    parseJSONContent: (url) => ipcRenderer.invoke('parseJSONContent', url),
    parseXMLContent: (url) => ipcRenderer.invoke('parseXMLContent', url),
    parseCSVContent: (url) => ipcRenderer.invoke('parseCSVContent', url),
    parseExcelContent: (url) => ipcRenderer.invoke('parseExcelContent', url),
    parseMarkdownContent: (url) => ipcRenderer.invoke('parseMarkdownContent', url),
    parseTextContent: (url) => ipcRenderer.invoke('parseTextContent', url),
    parsePDFContent: (url) => ipcRenderer.invoke('parsePDFContent', url),
    parseImageContent: (url) => ipcRenderer.invoke('parseImageContent', url),
    parseAudioContent: (url) => ipcRenderer.invoke('parseAudioContent', url),
    parseVideoContent: (url) => ipcRenderer.invoke('parseVideoContent', url),
    parseArchiveContent: (url) => ipcRenderer.invoke('parseArchiveContent', url),
    parseHTMLFromFile: (filePath, selector) => ipcRenderer.invoke('parseHTMLFromFile', filePath, selector),
    parseDynamicHTMLFromFile: (filePath, selector) => ipcRenderer.invoke('parseDynamicHTMLFromFile', filePath, selector),
    parseAPIFromFile: (filePath, options) => ipcRenderer.invoke('parseAPIFromFile', filePath, options),
    parseJSONFromFile: (filePath) => ipcRenderer.invoke('parseJSONFromFile', filePath),
    parseXMLFromFile: (filePath) => ipcRenderer.invoke('parseXMLFromFile', filePath),
    parseCSVFromFile: (filePath) => ipcRenderer.invoke('parseCSVFromFile', filePath),
    parseExcelFromFile: (filePath) => ipcRenderer.invoke('parseExcelFromFile', filePath),
    parseMarkdownFromFile: (filePath) => ipcRenderer.invoke('parseMarkdownFromFile', filePath),
    parseTextFromFile: (filePath) => ipcRenderer.invoke('parseTextFromFile', filePath),
    parsePDFFromFile: (filePath) => ipcRenderer.invoke('parsePDFFromFile', filePath),
    parseImageFromFile: (filePath) => ipcRenderer.invoke('parseImageFromFile', filePath),
    parseAudioFromFile: (filePath) => ipcRenderer.invoke('parseAudioFromFile', filePath),
    parseVideoFromFile: (filePath) => ipcRenderer.invoke('parseVideoFromFile', filePath),
    parseArchiveFromFile: (filePath) => ipcRenderer.invoke('parseArchiveFromFile', filePath),
    parseHTMLContentFromFile: (filePath, selector) => ipcRenderer.invoke('parseHTMLContentFromFile', filePath, selector),
    parseDynamicHTMLContentFromFile: (filePath, selector) => ipcRenderer.invoke('parseDynamicHTMLContentFromFile', filePath, selector),
    parseAPIContentFromFile: (filePath, options) => ipcRenderer.invoke('parseAPIContentFromFile', filePath, options),
    parseJSONContentFromFile: (filePath) => ipcRenderer.invoke('parseJSONContentFromFile', filePath),
    parseXMLContentFromFile: (filePath) => ipcRenderer.invoke('parseXMLContentFromFile', filePath),
    parseCSVContentFromFile: (filePath) => ipcRenderer.invoke('parseCSVContentFromFile', filePath),
    parseExcelContentFromFile: (filePath) => ipcRenderer.invoke('parseExcelContentFromFile', filePath),
    parseMarkdownContentFromFile: (filePath) => ipcRenderer.invoke('parseMarkdownContentFromFile', filePath),
    parseTextContentFromFile: (filePath) => ipcRenderer.invoke('parseTextContentFromFile', filePath),
    parsePDFContentFromFile: (filePath) => ipcRenderer.invoke('parsePDFContentFromFile', filePath),
    parseImageContentFromFile: (filePath) => ipcRenderer.invoke('parseImageContentFromFile', filePath),
    parseAudioContentFromFile: (filePath) => ipcRenderer.invoke('parseAudioContentFromFile', filePath),
    parseVideoContentFromFile: (filePath) => ipcRenderer.invoke('parseVideoContentFromFile', filePath),
    parseArchiveContentFromFile: (filePath) => ipcRenderer.invoke('parseArchiveContentFromFile', filePath),
    parseHTMLFromFileContent: (filePath, selector) => ipcRenderer.invoke('parseHTMLFromFileContent', filePath, selector),
    parseDynamicHTMLFromFileContent: (filePath, selector) => ipcRenderer.invoke('parseDynamicHTMLFromFileContent', filePath, selector),
    parseAPIFromFileContent: (filePath, options) => ipcRenderer.invoke('parseAPIFromFileContent', filePath, options),
    parseJSONFromFileContent: (filePath) => ipcRenderer.invoke('parseJSONFromFileContent', filePath),
    parseXMLFromFileContent: (filePath) => ipcRenderer.invoke('parseXMLFromFileContent', filePath),
    parseCSVFromFileContent: (filePath) => ipcRenderer.invoke('parseCSVFromFileContent', filePath),
    parseExcelFromFileContent: (filePath) => ipcRenderer.invoke('parseExcelFromFileContent', filePath),
    parseMarkdownFromFileContent: (filePath) => ipcRenderer.invoke('parseMarkdownFromFileContent', filePath),
    parseTextFromFileContent: (filePath) => ipcRenderer.invoke('parseTextFromFileContent', filePath),
    parsePDFFromFileContent: (filePath) => ipcRenderer.invoke('parsePDFFromFileContent', filePath),
    parseImageFromFileContent: (filePath) => ipcRenderer.invoke('parseImageFromFileContent', filePath),
    parseAudioFromFileContent: (filePath) => ipcRenderer.invoke('parseAudioFromFileContent', filePath),
    parseVideoFromFileContent: (filePath) => ipcRenderer.invoke('parseVideoFromFileContent', filePath),
    parseArchiveFromFileContent: (filePath) => ipcRenderer.invoke('parseArchiveFromFileContent', filePath),
    parseHTMLContentFromFileContent: (filePath, selector) => ipcRenderer.invoke('parseHTMLContentFromFileContent', filePath, selector),
    parseDynamicHTMLContentFromFileContent: (filePath, selector) => ipcRenderer.invoke('parseDynamicHTMLContentFromFileContent', filePath, selector),
    parseAPIContentFromFileContent: (filePath, options) => ipcRenderer.invoke('parseAPIContentFromFileContent', filePath, options),
    parseJSONContentFromFileContent: (filePath) => ipcRenderer.invoke('parseJSONContentFromFileContent', filePath),
    parseXMLContentFromFileContent: (filePath) => ipcRenderer.invoke('parseXMLContentFromFileContent', filePath),
    parseCSVContentFromFileContent: (filePath) => ipcRenderer.invoke('parseCSVContentFromFileContent', filePath),
    parseExcelContentFromFileContent: (filePath) => ipcRenderer.invoke('parseExcelContentFromFileContent', filePath),
    parseMarkdownContentFromFileContent: (filePath) => ipcRenderer.invoke('parseMarkdownContentFromFileContent', filePath),
    parseTextContentFromFileContent: (filePath) => ipcRenderer.invoke('parseTextContentFromFileContent', filePath),
    parsePDFContentFromFileContent: (filePath) => ipcRenderer.invoke('parsePDFContentFromFileContent', filePath),
    parseImageContentFromFileContent: (filePath) => ipcRenderer.invoke('parseImageContentFromFileContent', filePath),
    parseAudioContentFromFileContent: (filePath) => ipcRenderer.invoke('parseAudioContentFromFileContent', filePath),
    parseVideoContentFromFileContent: (filePath) => ipcRenderer.invoke('parseVideoContentFromFileContent', filePath),
    parseArchiveContentFromFileContent: (filePath) => ipcRenderer.invoke('parseArchiveContentFromFileContent', filePath),
});
